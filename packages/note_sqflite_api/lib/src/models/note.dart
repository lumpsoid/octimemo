import 'dart:convert';

import 'package:equatable/equatable.dart';
import 'package:flutter/rendering.dart';

class Note extends Equatable {
  const Note({
    required this.id,
    required this.body,
    required this.dateCreated,
    required this.dateModified,
  });

  static int newId() {
    return DateTime.now().microsecondsSinceEpoch;
  }

  const Note.empty()
      : this(
          id: 0,
          body: '',
          dateCreated: 0,
          dateModified: 0,
        );

  Note.fromBody(String body)
      : this(
          id: Note.newId(),
          body: body,
          dateCreated: Note.newId(),
          dateModified: Note.newId(),
        );

  Note.fromDb(Map<String, dynamic> map)
      : this(
          id: map['id'] as int,
          body: map['body'] as String,
          dateCreated: map['date_created'] as int,
          dateModified: map['date_modified'] as int,
        );
  // Create a Note instance from a JSON string
  factory Note.fromJson(Map<String, dynamic> noteJson) {
    return Note(
      id: noteJson['id'],
      body: noteJson['body'],
      dateCreated: noteJson['dateCreated'],
      dateModified: noteJson['dateModified'],
    );
  }

  /// The unique identifier for the book.
  ///
  /// If no [id] is provided, it will be autogenerated based on the current
  /// microsecond timestamp.
  final int id;

  /// The text content of the note.
  final String body;

  /// The date the note was created in microseconds since epoch.
  final int dateCreated;

  /// The date the note was last time modified in microseconds since epoch.
  final int dateModified;

  bool get isEmpty => id == 0;

  Map<String, dynamic> ToDb() {
    return {
      'id': id,
      'body': body,
      'date_created': dateCreated,
      'date_modified': dateModified,
    };
  }

  // Convert Note instance to JSON string
  String toJson() {
    final jsonMap = {
      'id': id,
      'body': body,
      'dateCreated': dateCreated,
      'dateModified': dateModified,
    };
    return jsonEncode(jsonMap);
  }

  DateTime getDateCreated() {
    return DateTime.fromMicrosecondsSinceEpoch(dateCreated);
  }

  String getDateCreatedFormatted() {
    final noteTimeCreated = DateTime.fromMicrosecondsSinceEpoch(dateCreated);
    return '${noteTimeCreated.year}-${noteTimeCreated.month}-${noteTimeCreated.day} ${noteTimeCreated.hour}:${noteTimeCreated.minute}';
  }

  Note rotateId() {
    return Note(
      id: Note.newId(),
      body: body,
      dateCreated: dateCreated,
      dateModified: dateModified,
    );
  }

  Note copyWith({
    int? id,
    String? body,
    int? dateCreated,
    int? dateModified,
  }) {
    return Note(
      id: id ?? this.id,
      body: body ?? this.body,
      dateCreated: dateCreated ?? this.dateCreated,
      dateModified: dateModified ?? this.dateModified,
    );
  }

  @override
  List<Object?> get props => [
        id,
        body,
        dateCreated,
        dateModified,
      ];
}
